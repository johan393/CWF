/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cwf;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author BeerSmokinGenius
 */
public class Center extends javax.swing.JPanel implements ActionListener{
     
    /**
     * Creates new form Center
     */
    
    int people;
    int posx[];
    int posy[];
    int iposx[];
    int iposy[];
    
    Timer t;//animates card moving from hand to middle
    Timer s;//animates from center to pile
    
    int ox;
    int oy;
    
    
    float x;
    float y;
    float dx;
    float dy;
    Image animatedCard;
    Card acard;
    int player;
    
    public Center(int people, Dimension d) {
        super();
        initComponents();
        this.people=people;
        this.setLayout(null);
        t=new Timer(1,this);
        s=new Timer(6,new ActionListener() {
            
        public void actionPerformed(ActionEvent e) { 
            if(!t.isRunning()){
              if(Math.abs((x)-iposx[player])<5&&Math.abs((y)-iposy[player])<5){
                animatedCard=null;
                s.stop();
                repaint();
              }
              else{
                x=x+dx;
                y=y+dy;
                repaint();
             }
            }
        
             
        }});
        
        posx=new int[people];
        posy=new int[people];
        iposx=new int[people];
        iposy=new int[people];
        
        this.setDoubleBuffered(true);
        this.setVisible(true);

    }
    public void playCard(Card card,int position){
        x=iposx[position];
        y=iposy[position];
        
        dx=(posx[position]-x)/70;
        dy=(posy[position]-y)/70;
        animatedCard=Toolkit.getDefaultToolkit().getImage(card.loc);
        acard=card;
        acard.setCard('p');
        player=position;
        t.start();//animates card moving from hand to middle
        
    }
    
    public void pos(Dimension d){
        //ox,oy is center of middle panel
        ox=(int) ((d.getWidth()-240)/2);
        oy=(int) ((d.getHeight()-240)/2);

        if(people==4){
            posx[0]=ox-40;
            posx[1]=ox-120;
            posx[2]=ox-40;
            posx[3]=ox+40;
            
            posy[0]=oy+60;
            posy[1]=oy-60;
            posy[2]=oy-180;
            posy[3]=oy-60;
            
            iposx[0]=ox-40;
            iposx[1]=0;
            iposx[2]=ox-40;
            iposx[3]=this.getWidth();
            
            iposy[0]=this.getHeight();
            iposy[1]=oy-60;
            iposy[2]=0;
            iposy[3]=oy-60;
        }
    }
    public void takeTrick(int position){
        animatedCard=Toolkit.getDefaultToolkit().getImage("back-blue.png");
        x=ox-40;
        y=oy-60;
      
        dx=(iposx[position]-x)/70;
        dy=(iposy[position]-y)/70;
        player=position;
        this.removeAll();
        s.start();//animates from center to pile
    }
        
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        if(animatedCard!=null){
            g.drawImage(animatedCard, (int)x, (int)y, 80,120, null);//type cast here is literally just a simpler rounding function
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(480, 400));
        setMinimumSize(new java.awt.Dimension(480, 400));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(480, 400));
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if(Math.abs((x)-posx[player])<5&&Math.abs((y)-posy[player])<5){
            x=posx[player];
            y=posy[player];
            acard.setBounds((int)x,(int)y,80,120);
            this.add(acard);
            animatedCard=null;
            t.stop();
            repaint();
        }
        else{
            x=x+dx;
            y=y+dy;
            repaint();
        }
        
    }
}
